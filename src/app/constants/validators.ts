export const COMMON_VALS: any[] = [
    { val: "@IsDefined(value: any)	", desc: "Checks if value is defined (!== undefined, !== null). This is the only decorator that ignores skipMissingProperties option." },
    { val: "@IsOptional()	", desc: "Checks if given value is empty (=== null, === undefined) and if so, ignores all the validators on the property." },
    { val: "@Equals(comparison: any)	", desc: "Checks if value equals (\"===\") comparison." },
    { val: "@NotEquals(comparison: any)	", desc: "Checks if value not equal (\"!==\") comparison." },
    { val: "@IsEmpty()	", desc: "Checks if given value is empty (=== '', === null, === undefined)." },
    { val: "@IsNotEmpty()	", desc: "Checks if given value is not empty (!== '', !== null, !== undefined)." },
    { val: "@IsIn(values: any[])	", desc: "Checks if value is in an array of allowed values." },
    { val: "@IsNotIn(values: any[])	", desc: "Checks if value is not in an array of disallowed values." }];

export const TYPE_VALS: any[] = [
    { val: "@IsBoolean()	", desc: "Checks if a value is a boolean." },
    { val: "@IsDate()	", desc: "Checks if the value is a date." },
    { val: "@IsString()	", desc: "Checks if the value is a string." },
    { val: "@IsNumber(options: IsNumberOptions)	", desc: "Checks if the value is a number." },
    { val: "@IsInt()	", desc: "Checks if the value is an integer number." },
    { val: "@IsArray()	", desc: "Checks if the value is an array" },
    { val: "@IsEnum(entity: object)	", desc: "Checks if the value is a valid enum" }];

export const NUMBER_VALS: any[] = [
    { val: "@IsDivisibleBy(num: number)	", desc: "Checks if the value is a number that's divisible by another." },
    { val: "@IsPositive()	", desc: "Checks if the value is a positive number greater than zero." },
    { val: "@IsNegative()	", desc: "Checks if the value is a negative number smaller than zero." },
    { val: "@Min(min: number)	", desc: "Checks if the given number is greater than or equal to given number." },
    { val: "@Max(max: number)	", desc: "Checks if the given number is less than or equal to given number." }];

export const DATE_VALS: any[] = [
    { val: "@MinDate(date: Date | (() => Date))	", desc: "Checks if the value is a date that's after the specified date." },
    { val: "@MaxDate(date: Date | (() => Date))	", desc: "Checks if the value is a date that's before the specified date." }];

export const STRINGTYPE_VALS: any[] = [
    { val: "@IsBooleanString()	", desc: "Checks if a string is a boolean (e.g. is \"true\" or \"false\" or \"1\", \"0\")." },
    { val: "@IsDateString()	", desc: "Alias for XXXXXXXIsISO8601()." },
    { val: "@IsNumberString(options?: IsNumericOptions)	", desc: "Checks if a string is a number." },
    { val: "@Contains(seed: string)	", desc: "Checks if the string contains the seed." },
    { val: "@NotContains(seed: string)	", desc: "Checks if the string not contains the seed." },
    { val: "@IsAlpha()	", desc: "Checks if the string contains only letters (a-zA-Z)." },
    { val: "@IsAlphanumeric()	", desc: "Checks if the string contains only letters and numbers." },
    { val: "@IsDecimal(options?: IsDecimalOptions)	", desc: "Checks if the string is a valid decimal value. Default IsDecimalOptions are force_decimal=False, decimal_digits: '1,', locale: 'en-US'" },
    { val: "@IsAscii()	", desc: "Checks if the string contains ASCII chars only." },
    { val: "@IsBase32()	", desc: "Checks if a string is base32 encoded." },
    { val: "@IsBase58()	", desc: "Checks if a string is base58 encoded." },
    { val: "@IsBase64(options?: IsBase64Options)	", desc: "Checks if a string is base64 encoded." },
    { val: "@IsIBAN()	", desc: "Checks if a string is a IBAN (International Bank Account Number)." },
    { val: "@IsBIC()	", desc: "Checks if a string is a BIC (Bank Identification Code) or SWIFT code." },
    { val: "@IsByteLength(min: number, max?: number)	", desc: "Checks if the string's length (in bytes) falls in a range." },
    { val: "@IsCreditCard()	", desc: "Checks if the string is a credit card." },
    { val: "@IsCurrency(options?: IsCurrencyOptions)	", desc: "Checks if the string is a valid currency amount." },
    { val: "@IsISO4217CurrencyCode()	", desc: "Checks if the string is an ISO 4217 currency code." },
    { val: "@IsEthereumAddress()	", desc: "Checks if the string is an Ethereum address using basic regex. Does not validate address checksums." },
    { val: "@IsBtcAddress()	", desc: "Checks if the string is a valid BTC address." },
    { val: "@IsDataURI()	", desc: "Checks if the string is a data uri format." },
    { val: "@IsEmail(options?: IsEmailOptions)	", desc: "Checks if the string is an email." },
    { val: "@IsFQDN(options?: IsFQDNOptions)	", desc: "Checks if the string is a fully qualified domain name (e.g. domain.com)." },
    { val: "@IsFullWidth()	", desc: "Checks if the string contains any full-width chars." },
    { val: "@IsHalfWidth()	", desc: "Checks if the string contains any half-width chars." },
    { val: "@IsVariableWidth()	", desc: "Checks if the string contains a mixture of full and half-width chars." },
    { val: "@IsHexColor()	", desc: "Checks if the string is a hexadecimal color." },
    { val: "@IsHSL()	", desc: "Checks if the string is an HSL color based on CSS Colors Level 4 specification." },
    { val: "@IsRgbColor(options?: IsRgbOptions)	", desc: "Checks if the string is a rgb or rgba color." },
    { val: "@IsIdentityCard(locale?: string)	", desc: "Checks if the string is a valid identity card code." },
    { val: "@IsPassportNumber(countryCode?: string)	", desc: "Checks if the string is a valid passport number relative to a specific country code." },
    { val: "@IsPostalCode(locale?: string)	", desc: "Checks if the string is a postal code." },
    { val: "@IsHexadecimal()	", desc: "Checks if the string is a hexadecimal number." },
    { val: "@IsOctal()	", desc: "Checks if the string is a octal number." },
    { val: "@IsMACAddress(options?: IsMACAddressOptions)	", desc: "Checks if the string is a MAC Address." },
    { val: "@IsIP(version?: \"4\"|\"6\")	", desc: "Checks if the string is an IP (version 4 or 6)." },
    { val: "@IsPort()	", desc: "Checks if the string is a valid port number." },
    { val: "@IsISBN(version?: \"10\"|\"13\")	", desc: "Checks if the string is an ISBN (version 10 or 13)." },
    { val: "@IsEAN()	", desc: "Checks if the string is an if the string is an EAN (European Article Number)." },
    { val: "@IsISIN()	", desc: "Checks if the string is an ISIN (stock/security identifier)." },
    { val: "@IsISO8601(options?: IsISO8601Options)	", desc: "Checks if the string is a valid ISO 8601 date format. Use the option strict = true for additional checks for a valid date." },
    { val: "@IsJSON()	", desc: "Checks if the string is valid JSON." },
    { val: "@IsJWT()	", desc: "Checks if the string is valid JWT." },
    { val: "@IsObject()	", desc: "Checks if the object is valid Object (null, functions, arrays will return false)." },
    { val: "@IsNotEmptyObject()	", desc: "Checks if the object is not empty." },
    { val: "@IsLowercase()	", desc: "Checks if the string is lowercase." },
    { val: "@IsLatLong()	", desc: "Checks if the string is a valid latitude-longitude coordinate in the format lat, long." },
    { val: "@IsLatitude()	", desc: "Checks if the string or number is a valid latitude coordinate." },
    { val: "@IsLongitude()	", desc: "Checks if the string or number is a valid longitude coordinate." },
    { val: "@IsMobilePhone(locale: string)	", desc: "Checks if the string is a mobile phone number." },
    { val: "@IsISO31661Alpha2()	", desc: "Checks if the string is a valid ISO 3166-1 alpha-2 officially assigned country code." },
    { val: "@IsISO31661Alpha3()	", desc: "Checks if the string is a valid ISO 3166-1 alpha-3 officially assigned country code." },
    { val: "@IsLocale()	", desc: "Checks if the string is a locale." },
    { val: "@IsPhoneNumber(region: string)	", desc: "Checks if the string is a valid phone number using libphonenumber-js." },
    { val: "@IsMongoId()	", desc: "Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId." },
    { val: "@IsMultibyte()	", desc: "Checks if the string contains one or more multibyte chars." },
    { val: "@IsNumberString(options?: IsNumericOptions)	", desc: "Checks if the string is numeric." },
    { val: "@IsSurrogatePair()	", desc: "Checks if the string contains any surrogate pairs chars." },
    { val: "@IsTaxId()	", desc: "Checks if the string is a valid tax ID. Default locale is en-US." },
    { val: "@IsUrl(options?: IsURLOptions)	", desc: "Checks if the string is a URL." },
    { val: "@IsMagnetURI()	", desc: "Checks if the string is a magnet uri format." },
    { val: "@IsUUID(version?: UUIDVersion)	", desc: "Checks if the string is a UUID (version 3, 4, 5 or all )." },
    { val: "@IsFirebasePushId()	", desc: "Checks if the string is a Firebase Push ID" },
    { val: "@IsUppercase()	", desc: "Checks if the string is uppercase." },
    { val: "@Length(min: number, max?: number)	", desc: "Checks if the string's length falls in a range." },
    { val: "@MinLength(min: number)	", desc: "Checks if the string's length is not less than given number." },
    { val: "@MaxLength(max: number)	", desc: "Checks if the string's length is not more than given number." },
    { val: "@Matches(pattern: RegExp, modifiers?: string)	", desc: "Checks if string matches the pattern. Either matches('foo', /foo/i) or matches('foo', 'foo', 'i')." },
    { val: "@IsMilitaryTime()	", desc: "Checks if the string is a valid representation of military time in the format HH:MM." },
    { val: "@IsTimeZone()	", desc: "Checks if the string represents a valid IANA time-zone." },
    { val: "@IsHash(algorithm: string)	", desc: "Checks if the string is a hash The following types are supported:md4, md5, sha1, sha256, sha384, sha512, ripemd128, ripemd160, tiger128, tiger160, tiger192, crc32, crc32b." },
    { val: "@IsMimeType()	", desc: "Checks if the string matches to a valid MIME type format" },
    { val: "@IsSemVer()	", desc: "Checks if the string is a Semantic Versioning Specification (SemVer)." },
    { val: "@IsISSN(options?: IsISSNOptions)	", desc: "Checks if the string is a ISSN." },
    { val: "@IsISRC()	", desc: "Checks if the string is a ISRC." },
    { val: "@IsRFC3339()	", desc: "Checks if the string is a valid RFC 3339 date." },
    { val: "@IsStrongPassword(options?: IsStrongPasswordOptions)	", desc: "Checks if the string is a strong password." }];

export const ARRAY_VALS: any[] = [
    { val: "@ArrayContains(values: any[])	", desc: "Checks if array contains all values from the given array of values." },
    { val: "@ArrayNotContains(values: any[])	", desc: "Checks if array does not contain any of the given values." },
    { val: "@ArrayNotEmpty()	", desc: "Checks if given array is not empty." },
    { val: "@ArrayMinSize(min: number)	", desc: "Checks if the array's length is greater than or equal to the specified number." },
    { val: "@ArrayMaxSize(max: number)	", desc: "Checks if the array's length is less or equal to the specified number." },
    { val: "@ArrayUnique(identifier?: (o) => any)	", desc: "Checks if all array's values are unique. Comparison for objects is reference-based. Optional function can be speciefied which return value will be used for the comparsion." }];

export const OTHER_VALS: any[] = [
    { val: "@IsInstance(value: any)	", desc: "Checks if the property is an instance of the passed value." },
    { val: "@Allow()	", desc: "Prevent stripping off the property when no other constraint is specified for it." }];